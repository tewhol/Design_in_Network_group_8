Index: Randstad_modified.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Randstad_modified.ipynb b/Randstad_modified.ipynb
--- a/Randstad_modified.ipynb	(revision 72eea632829900d0349663bc709742782d951e64)
+++ b/Randstad_modified.ipynb	(date 1712739663423)
@@ -3165,6 +3165,91 @@
    }
   },
   {
+   "cell_type": "code",
+   "execution_count": 111,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "{'Alkmaar': 0.013123929473982436, 'Almere': 0.026662395165079435, 'Alphen aan de Rijn': 0.027877050603459647, 'Amersfoort': 0.023328256130288893, 'Amsterdam': 0.167425710159905, 'Delft': 0.028676769334772215, 'Den Haag': 0.08300723026456763, 'Dordrecht': 0.017183638235778623, 'Gouda': 0.02103233482651961, 'Haarlem': 0.05038223653716217, 'Hilversum': 0.04562948508289388, 'Leiden': 0.046965820546036895, 'Rotterdam': 0.06533770965493176, 'Schiedam': 0.06754492729929214, 'Schiphol Haarlemmermeer': 0.05261312732819911, 'Spijkenisse': 0.011654358454970173, 'Utrecht': 0.05988566525655797, 'Vlaardingen': 0.015203772919261102, 'Westland': 0.041379647088700275, 'Woerden': 0.05298135722148908, 'Zaanstad': 0.03983293566299321, 'Zoetermeer': 0.04227164275315859}\n"
+     ]
+    }
+   ],
+   "source": [
+    "import networkx as nx\n",
+    "\n",
+    "# Assuming Randstad_Graph is already created and has 'randstad_car_times' as edge attributes\n",
+    "# and 'employees' as node attributes\n",
+    "\n",
+    "# Step 1: Preprocess the graph to create a new weight attribute for each edge\n",
+    "for u, v, d in Randstad_Graph.edges(data=True):\n",
+    "    car_time = d.get('randstad_car_times', 1)  # Assuming default car_time as 1 if not present\n",
+    "    employees_u = Randstad_Graph.nodes[u].get('employees', 1)  # Assuming default employees as 1 if not present\n",
+    "    # Here's an example of combining them; you might need a different formula based on your model\n",
+    "    combined_weight = car_time * employees_u\n",
+    "    d['combined_weight'] = combined_weight\n",
+    "\n",
+    "# Step 2: Compute PageRank using the new combined_weight\n",
+    "pagerank_with_weights = nx.pagerank(Randstad_Graph, weight='combined_weight')\n",
+    "\n",
+    "print(pagerank_with_weights)\n",
+    "df_network['PageRank_Weighted'] = df_network['Municipality'].map(pagerank_with_weights)\n"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-10T08:59:54.480096900Z",
+     "start_time": "2024-04-10T08:59:54.029517200Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 113,
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "0     0.013124\n",
+      "1     0.026662\n",
+      "2     0.027877\n",
+      "3     0.023328\n",
+      "4     0.167426\n",
+      "5     0.028677\n",
+      "6     0.083007\n",
+      "7     0.017184\n",
+      "8     0.021032\n",
+      "9     0.050382\n",
+      "10    0.045629\n",
+      "11    0.046966\n",
+      "12    0.065338\n",
+      "13    0.067545\n",
+      "14    0.052613\n",
+      "15    0.011654\n",
+      "16    0.059886\n",
+      "17    0.015204\n",
+      "18    0.041380\n",
+      "19    0.052981\n",
+      "20    0.039833\n",
+      "21    0.042272\n",
+      "Name: PageRank_Weighted, dtype: float64\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(df_network['PageRank_Weighted'])"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "end_time": "2024-04-10T09:00:31.679617900Z",
+     "start_time": "2024-04-10T09:00:31.188438600Z"
+    }
+   }
+  },
+  {
    "cell_type": "code",
    "execution_count": 96,
    "outputs": [],
